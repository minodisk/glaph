{"version":3,"file":"static/iframe.ca986ac561778f3597b7.bundle.js","sources":["webpack:///./src/Application.ts"],"sourcesContent":["import { Application as PIXIApplication, DisplayObject } from 'pixi.js'\nimport LineChart from './line/Chart'\nimport PieChart from './pie/Chart'\nimport Tooltip from './tooltip/Tooltip'\nimport { TooltipEvent } from './tooltip/TooltipEvent'\n\nexport type Chart = LineChart | PieChart\n\nexport default class Application extends PIXIApplication {\n  public element: HTMLDivElement\n  public viewport: HTMLDivElement\n  public stageWidth: number = 0\n  public stageHeight: number = 0\n  public obs: any\n  private chart?: Chart\n  private tooltip?: Tooltip\n\n  constructor({\n    width = '100%',\n    height = '100%',\n  }: {\n    width?: number | string\n    height?: number | string\n  } = {}) {\n    super({\n      antialias: true,\n      transparent: true,\n      resolution: window.devicePixelRatio,\n    })\n    this.renderer.autoResize = true\n    this.view.style.position = 'absolute'\n\n    this.viewport = document.createElement('div')\n    this.viewport.style.width = '100%'\n    this.viewport.style.height = '100%'\n    this.viewport.style.overflow = 'hidden'\n    this.viewport.style.position = 'relative'\n    this.viewport.appendChild(this.view)\n\n    this.element = document.createElement('div')\n    this.element.style.width = typeof width === 'number' ? `${width}px` : width\n    this.element.style.height =\n      typeof height === 'number' ? `${height}px` : height\n    this.element.style.position = 'relative'\n    this.element.appendChild(this.viewport)\n    this.element.addEventListener('DOMNodeInsertedIntoDocument', this.onAppend)\n  }\n\n  public setChart(chart: Chart) {\n    if (this.chart != undefined) {\n      this.chart.removeAllListeners()\n      this.stage.removeChild(this.chart)\n    }\n    this.chart = chart\n    this.listenTooltipEvents()\n    this.addChild(chart)\n  }\n\n  public addChild(obj: DisplayObject) {\n    this.stage.addChild(obj)\n  }\n\n  public setTooltip(tooltip: Tooltip) {\n    if (this.tooltip != undefined) {\n      this.element.removeChild(this.tooltip.element)\n    }\n    this.tooltip = tooltip\n    this.listenTooltipEvents()\n    this.element.appendChild(this.tooltip.element)\n  }\n\n  public resize(width: number, height: number) {\n    this.stageWidth = width\n    this.stageHeight = height\n    this.renderer.resize(width, height)\n    this.stage.children.forEach(child =>\n      child.emit('stageresize', { width, height }),\n    )\n  }\n\n  private listenTooltipEvents() {\n    if (this.chart == undefined || this.tooltip == undefined) {\n      return\n    }\n    this.chart.on('tooltipstart', this.onTooltipStart)\n    this.chart.on('tooltipmove', this.onTooltipMove)\n    this.chart.on('tooltipend', this.onTooltipEnd)\n    this.chart.on('tooltipdata', this.onTooltipData)\n  }\n\n  private onAppend = () => {\n    this.element.removeEventListener(\n      'DOMNodeInsertedIntoDocument',\n      this.onAppend,\n    )\n\n    const { width, height } = this.viewport.getBoundingClientRect()\n    this.resize(width, height)\n\n    if ((window as any).ResizeObserver) {\n      this.obs = new (window as any).ResizeObserver(this.onStageResize)\n      this.obs.observe(this.viewport)\n    } else {\n      window.addEventListener('resize', this.onWindowResize)\n    }\n  }\n\n  private onStageResize = ([\n    {\n      contentRect: { width, height },\n    },\n  ]: any) => {\n    this.resize(width, height)\n  }\n\n  private onWindowResize = () => {\n    const { width, height } = this.viewport.getBoundingClientRect()\n    this.resize(width, height)\n  }\n\n  private onTooltipStart = (e: TooltipEvent) => {\n    if (this.tooltip == undefined) {\n      return\n    }\n    this.tooltip.moveTo(e.cursorX, e.cursorY, this.stageWidth, this.stageHeight)\n    this.tooltip.show()\n  }\n\n  private onTooltipMove = (e: TooltipEvent) => {\n    if (this.tooltip == undefined) {\n      return\n    }\n    this.tooltip.moveTo(e.cursorX, e.cursorY, this.stageWidth, this.stageHeight)\n  }\n\n  private onTooltipEnd = (e: TooltipEvent) => {\n    if (this.tooltip == undefined) {\n      return\n    }\n    this.tooltip.moveTo(e.cursorX, e.cursorY, this.stageWidth, this.stageHeight)\n    this.tooltip.hide()\n  }\n\n  private onTooltipData = (e: TooltipEvent) => {\n    if (this.tooltip == undefined) {\n      return\n    }\n    this.tooltip.render(e.data)\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}